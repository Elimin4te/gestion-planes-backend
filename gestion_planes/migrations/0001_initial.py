# Generated by Django 5.1.6 on 2025-04-22 03:27

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import gestion_planes.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("autenticacion_docente", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="UnidadCurricular",
            fields=[
                (
                    "codigo",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                (
                    "trayecto",
                    models.SmallIntegerField(
                        choices=[(0, "Inicial"), (1, "1"), (2, "2"), (3, "3"), (4, "4")]
                    ),
                ),
                (
                    "semestre",
                    models.SmallIntegerField(
                        choices=[("NA", "No Aplica"), (1, "1"), (2, "2")]
                    ),
                ),
                (
                    "unidades_credito",
                    models.SmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, "Las unidades de crédito no pueden ser menores a 1."
                            ),
                            django.core.validators.MaxValueValidator(
                                10,
                                "Las unidades de crédito no pueden ser mayores a 10.",
                            ),
                        ]
                    ),
                ),
                ("nombre", models.CharField(max_length=32)),
            ],
            options={
                "db_table": "unidades_curriculares",
            },
        ),
        migrations.CreateModel(
            name="PlanAprendizaje",
            fields=[
                (
                    "codigo_grupo",
                    models.CharField(max_length=32, primary_key=True, serialize=False),
                ),
                (
                    "nucleo",
                    models.CharField(
                        choices=[
                            ("FLO", "La Floresta"),
                            ("URB", "La Urbina"),
                            ("ALT", "Altagracia"),
                            ("LGA", "La Guaira"),
                        ],
                        max_length=6,
                    ),
                ),
                (
                    "turno",
                    models.CharField(
                        choices=[
                            ("N", "Nocturno"),
                            ("V", "Vespertino"),
                            ("M", "Matutino"),
                            ("S", "Sabatino"),
                        ],
                        max_length=3,
                    ),
                ),
                ("pnf", models.CharField(max_length=32)),
                (
                    "fecha_creacion",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("fecha_modificacion", models.DateTimeField(null=True)),
                (
                    "docente",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="autenticacion_docente.docente",
                    ),
                ),
                (
                    "unidad_curricular",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gestion_planes.unidadcurricular",
                    ),
                ),
            ],
            options={
                "db_table": "planes_de_aprendizaje",
            },
            bases=(models.Model, gestion_planes.models.ExportablePDFMixin),
        ),
        migrations.CreateModel(
            name="PlanEvaluacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=96)),
                (
                    "fecha_creacion",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("fecha_modificacion", models.DateTimeField(null=True)),
                (
                    "plan_aprendizaje",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gestion_planes.planaprendizaje",
                    ),
                ),
            ],
            options={
                "db_table": "planes_de_evaluacion",
            },
            bases=(models.Model, gestion_planes.models.ExportablePDFMixin),
        ),
        migrations.CreateModel(
            name="ItemPlanEvaluacion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "instrumento_evaluacion",
                    models.CharField(
                        choices=[
                            ("PR", "Prueba escrita (objetiva)"),
                            ("PE", "Prueba escrita (ensayo)"),
                            ("PO", "Prueba oral"),
                            ("TR", "Trabajo escrito"),
                            ("TA", "Tarea"),
                            ("EX", "Examen práctico"),
                            ("PY", "Proyecto"),
                            ("IN", "Informe"),
                            ("PC", "Participación en clase"),
                            ("AC", "Actividades colaborativas"),
                            ("DE", "Debate"),
                            ("EX", "Exposición oral"),
                            ("SE", "Seminario"),
                            ("CT", "Control de lectura"),
                            ("CV", "Cuestionario"),
                            ("DI", "Diario reflexivo"),
                            ("CA", "Carpeta de trabajos"),
                            ("AU", "Autoevaluación"),
                            ("CO", "Coevaluación"),
                            ("OT", "Otras"),
                        ],
                        default="PR",
                        max_length=4,
                    ),
                ),
                (
                    "tipo_evaluacion",
                    models.CharField(
                        choices=[
                            ("DI", "Diagnóstica"),
                            ("FO", "Formativa"),
                            ("SU", "Sumativa"),
                            ("AU", "Autoevaluación"),
                            ("CO", "Coevaluación"),
                        ],
                        default="FO",
                        max_length=4,
                    ),
                ),
                ("habilidades_a_evaluar", models.TextField()),
                (
                    "peso",
                    models.SmallIntegerField(
                        choices=[
                            (5, "5%"),
                            (10, "10%"),
                            (15, "15%"),
                            (20, "20%"),
                            (25, "25%"),
                        ],
                        default=15,
                    ),
                ),
                ("fecha_planificada", models.DateField()),
                (
                    "plan_evaluacion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gestion_planes.planevaluacion",
                    ),
                ),
            ],
            options={
                "db_table": "items_plan_de_evaluacion",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="ObjetivoPlanAprendizaje",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("titulo", models.CharField(max_length=64)),
                ("contenido", models.TextField()),
                ("criterio_logro", models.TextField()),
                (
                    "estrategia_didactica",
                    models.CharField(
                        choices=[
                            ("CL", "Clase magistral"),
                            ("TR", "Trabajo en grupo"),
                            ("DE", "Debate"),
                            ("EP", "Estudio de caso"),
                            ("AP", "Aprendizaje basado en problemas"),
                            ("PY", "Proyecto"),
                            ("TA", "Taller"),
                            ("LB", "Laboratorio"),
                            ("EX", "Exposición"),
                            ("SE", "Seminario"),
                            ("TI", "Tutoría individual"),
                            ("TC", "Tutoría colectiva"),
                            ("VA", "Visita guiada"),
                            ("PC", "Práctica de campo"),
                            ("EV", "Evaluación"),
                            ("OT", "Otras"),
                        ],
                        default="CL",
                        max_length=4,
                    ),
                ),
                (
                    "duracion_horas",
                    models.SmallIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                2,
                                "La duración en horas de un objetivo debe ser de mínimo 2 y máximo 9.",
                            ),
                            django.core.validators.MaxValueValidator(
                                9,
                                "La duración en horas de un objetivo debe ser de mínimo 2 y máximo 9.",
                            ),
                        ]
                    ),
                ),
                (
                    "evaluacion_asociada",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="objetivos_asociados",
                        to="gestion_planes.itemplanevaluacion",
                    ),
                ),
                (
                    "plan_aprendizaje",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="gestion_planes.planaprendizaje",
                    ),
                ),
            ],
            options={
                "db_table": "objetivos_plan_de_aprendizaje",
                "ordering": ["id"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("duracion_horas__gte", 2)),
                        name="duracion_horas_mayor_que",
                        violation_error_message="La duración en horas de un objetivo debe ser de mínimo 2 y máximo 9.",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("duracion_horas__lte", 9)),
                        name="duracion_horas_menor_que",
                        violation_error_message="La duración en horas de un objetivo debe ser de mínimo 2 y máximo 9.",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            (
                                "estrategia_didactica__in",
                                [
                                    "CL",
                                    "TR",
                                    "DE",
                                    "EP",
                                    "AP",
                                    "PY",
                                    "TA",
                                    "LB",
                                    "EX",
                                    "SE",
                                    "TI",
                                    "TC",
                                    "VA",
                                    "PC",
                                    "EV",
                                    "OT",
                                ],
                            )
                        ),
                        name="validar_estrategia_didactica",
                        violation_error_message="Los valores válidos para la estrategia didáctica son [('CL', 'Clase magistral'), ('TR', 'Trabajo en grupo'), ('DE', 'Debate'), ('EP', 'Estudio de caso'), ('AP', 'Aprendizaje basado en problemas'), ('PY', 'Proyecto'), ('TA', 'Taller'), ('LB', 'Laboratorio'), ('EX', 'Exposición'), ('SE', 'Seminario'), ('TI', 'Tutoría individual'), ('TC', 'Tutoría colectiva'), ('VA', 'Visita guiada'), ('PC', 'Práctica de campo'), ('EV', 'Evaluación'), ('OT', 'Otras')]",
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="itemplanevaluacion",
            constraint=models.CheckConstraint(
                condition=models.Q(("peso__in", [5, 10, 15, 20, 25])),
                name="validar_peso",
                violation_error_message="Los pesos de evaluación válidos son [(5, '5%'), (10, '10%'), (15, '15%'), (20, '20%'), (25, '25%')]",
            ),
        ),
        migrations.AddConstraint(
            model_name="itemplanevaluacion",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    (
                        "instrumento_evaluacion__in",
                        [
                            "PR",
                            "PE",
                            "PO",
                            "TR",
                            "TA",
                            "EX",
                            "PY",
                            "IN",
                            "PC",
                            "AC",
                            "DE",
                            "EX",
                            "SE",
                            "CT",
                            "CV",
                            "DI",
                            "CA",
                            "AU",
                            "CO",
                            "OT",
                        ],
                    )
                ),
                name="validar_instrumento_evaluacion",
                violation_error_message="Los instrumentos de evaluación válidos son [('PR', 'Prueba escrita (objetiva)'), ('PE', 'Prueba escrita (ensayo)'), ('PO', 'Prueba oral'), ('TR', 'Trabajo escrito'), ('TA', 'Tarea'), ('EX', 'Examen práctico'), ('PY', 'Proyecto'), ('IN', 'Informe'), ('PC', 'Participación en clase'), ('AC', 'Actividades colaborativas'), ('DE', 'Debate'), ('EX', 'Exposición oral'), ('SE', 'Seminario'), ('CT', 'Control de lectura'), ('CV', 'Cuestionario'), ('DI', 'Diario reflexivo'), ('CA', 'Carpeta de trabajos'), ('AU', 'Autoevaluación'), ('CO', 'Coevaluación'), ('OT', 'Otras')]",
            ),
        ),
        migrations.AddConstraint(
            model_name="itemplanevaluacion",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("tipo_evaluacion__in", ["DI", "FO", "SU", "AU", "CO"])
                ),
                name="validar_tipo_evaluacion",
                violation_error_message="Los tipos de evaluación válidos son [('DI', 'Diagnóstica'), ('FO', 'Formativa'), ('SU', 'Sumativa'), ('AU', 'Autoevaluación'), ('CO', 'Coevaluación')]",
            ),
        ),
    ]
